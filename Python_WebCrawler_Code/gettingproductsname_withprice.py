# -*- coding: utf-8 -*-
"""GettingProductsName-WIthPrice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jYFEmyX4crdb50BuwUZVvOntI614TkB6
"""

import requests
from bs4 import BeautifulSoup
import csv

url = 'https://www.urcosme.com/tags/'
caretags = [3,11,12,13,14,19,20] #防曬、洗臉乳、卸妝、化妝水、乳液、精華、面膜
careType = ['防曬','洗臉乳','卸妝','化妝水','乳液','精華','面膜']
fountags = [29,30,31,98] #遮暇、粉底、定妝、隔離
founType = ['遮暇','粉底','定妝','隔離']
colotags = [32,33,34,35,36,37,38] #眉彩、眼線、眼影、睫毛、頰彩、修容、唇彩
coloType = ['眉彩','眼線','眼影','睫毛','頰彩','修容','唇彩']
query = '/products?page='
header = {'User-Agent':'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36'}

#取得總頁數
#發現全部頁數均為30頁,但為防止有新增的情況,亦使用這方式確保沒有漏掉

carePNum = []
founPNum = []
coloPNum = []

def getPageNum(l):
    r = requests.get(l,headers=header)
    objSoup = BeautifulSoup(r.text,'lxml')
    pageNum = objSoup.find_all('div','pagination')
    num = ''
    for i in pageNum:
        num = num + i.text
        num = num.split(' ')
        num = int(num[len(num)-2])
    return num

def setPageNum(lis,sLis):
    for i in lis:
        link = url + str(i) + '/products'
        sLis.append(getPageNum(link))

setPageNum(caretags,carePNum)
setPageNum(fountags,founPNum)
setPageNum(colotags,coloPNum)

#取得產品名稱
carePName = []
founPName = []
coloPName = []
#取得品牌名稱
careBName = []
founBName = []
coloBName = []
#取得產品價格
carePPrice = []
founPPrice = []
coloPPrice = []
def getName(tList,numList,pList,bList,priceList):
    for i in range(len(tList)):
        tempPName = []
        tempBName = []
        tempPrice = []
        for j in range(1,numList[i]+1):
            link = url + str(tList[i]) + query + str(j)
            r = requests.get(link,headers=header)
            objSoup = BeautifulSoup(r.text,'lxml')
            pName = objSoup.find_all('div','product-name single-dot')
            bName = objSoup.find_all('div','brand-name')
            priceData = objSoup.find_all('div','product-market-date')
            for k in range(len(pName)):
                tempPName.append(pName[k].text.strip())
                temp = bName[k].find('a','uc-minor-link') #因Brand name 中有兩個項目:品牌名稱及品牌活動,因此需把活動去掉
                tempBName.append(temp.text.strip())
                if priceData[k].text == "":
                    tempPrice.append('0')
                elif priceData[k].text.find('上市日期：') != -1:
                    temp = priceData[k].text.split('｜')
                    if len(temp) == 1:
                        tempPrice.append('0')
                    else:
                        tempPrice.append(temp[1].strip('價格：'))
                else:
                    tempPrice.append(priceData[k].text.strip('價格：'))
        pList.append(tempPName)
        bList.append(tempBName)
        priceList.append(tempPrice)

print('Start to get Skin Care data')
getName(caretags,carePNum,carePName,careBName,carePPrice)
print('Start to get Foundation data')
getName(fountags,founPNum,founPName,founBName,founPPrice)
print('Start to get Cosmetics data')
getName(colotags,coloPNum,coloPName,coloBName,coloPPrice)
print('finished getting data.')

#把資料寫入csv檔
type = ['SkinCare','Base','Cosmetic']
cnt = 0
print('Start to write data as csv file...')
print('---------------------------------------------------------------')
with open('productsName.csv','w',newline='',encoding="Big5") as csvfile:
    fieldnames = ['Type','Product','Brand','Name','Price']
    writer = csv.DictWriter(csvfile, fieldnames = fieldnames)
    
    writer.writeheader()
    for i in range(len(carePName)):
        for j in range(len(carePName[i])):
            try:
                writer.writerow({'Type':type[0], 'Product':careType[i], 'Brand':careBName[i][j], 'Name':carePName[i][j], 'Price':carePPrice[i][j]})
            except:
                cnt = cnt + 1
                print('No.',cnt,', Skin Care Encoding error->\tproduct name = ',carePName[i][j])
                    
    for i in range(len(founPName)):
        for j in range(len(founPName[i])):
            try:
                writer.writerow({'Type':type[1], 'Product':founType[i], 'Brand':founBName[i][j], 'Name':founPName[i][j], 'Price':founPPrice[i][j]})
            except:
                cnt = cnt + 1
                print('No.',cnt,', Foundation Encoding error->\tproduct name = ',founPName[i][j])
                
    for i in range(len(coloPName)):
        for j in range(len(coloPName[i])):
            try:
                writer.writerow({'Type':type[2], 'Product':coloType[i], 'Brand':coloBName[i][j], 'Name':coloPName[i][j], 'Price':coloPPrice[i][j]})
            except:
                cnt = cnt + 1
                print('No.',cnt,', Cosmetics Encoding error->\tproduct name = ',coloPName[i][j])
print('---------------------------------------------------------------')
print('Finished writing data as csv file.')
#統計後,總計有324項因名字/品牌編碼有誤無法放進CSV檔,即總項目有5401項,當中5077項為有效,而324項為無效